---
alwaysApply: true
---
# 项目管理工作流程

## 核心原则

### 效率原则
- 并行执行优于顺序执行，识别可同时进行的任务
- 每个阶段输出最小可验证版本，避免过度设计
- 30分钟无进展即停止重新评估方法
- 所有交付物必须能独立部署运行

### 质量原则
- 代码包含完整类型注解、文档注释，10分钟内可理解
- 零配置运行：一条命令即可启动，包含完整依赖
- 安全优先：输入验证、权限检查、数据保护
- 跨平台验证：Windows、macOS、Linux兼容或明确限制

### 协作原则
- 技术术语配简要解释，确保理解一致
- 决策记录原因、备选方案、风险评估
- 问题报告包含：描述、复现、影响、解决方案
- 每次交流包含需求编号、设计章节、代码位置引用

## 工作流程

### 阶段控制
每个阶段完成后停止工作，等待明确确认后进入下一阶段。

**需求触发词汇：** "我想要"、"需要实现"、"帮我做"、"创建"、"修改"、"增加功能"

**阶段门禁：**
- 需求→设计：需求文档完成，EARS格式验收标准编写完整
- 设计→实施：技术设计完成，架构图绘制，API设计定义
- 开始执行：任务拆分完成，依赖关系明确，工时估算完整

### SPECS 驱动开发

采用需求、设计、实施三阶段结构化开发方法。

#### 需求收集与分析

**目标：** 将用户想法转化为完整需求文档

**执行标准：**
- 3轮对话内完成需求文档，避免无限询问
- 所有验收标准使用EARS格式（WHEN、IF、WHILE、WHERE）
- 用户故事包含角色、功能、价值三要素
- 文档位置：`.specs/{feature_name}/requirements.md`

**需求文档模板：**

```markdown
# 需求文档

## 功能概述
[功能的高层次描述，包括主要能力和边界]

## 需求详情

### 需求 1 - [需求名称]
**用户故事：** 作为 [角色]，我希望 [功能]，以便 [价值/好处]

**验收标准：**
1. WHEN [触发条件] THEN [系统名称] SHALL [系统响应]
2. IF [前置条件] THEN [系统名称] SHALL [系统响应]
3. WHILE [持续条件] WHEN [触发事件] THEN [系统名称] SHALL [系统响应]

## 非功能性需求
- 性能要求
- 安全要求
- 可用性要求

## 安全检查清单
- [ ] 敏感数据处理方案已定义
- [ ] 访问控制机制已实现
- [ ] 输入验证和防护已添加
- [ ] 错误处理不泄露敏感信息
- [ ] 依赖库安全性已检查

## 约束条件
- 技术约束
- 业务约束
- 环境约束
```

**EARS 语法说明：**
- **普遍需求：** THE [系统名称] SHALL [系统响应]
- **事件驱动：** WHEN [触发事件] THE [系统名称] SHALL [系统响应]
- **状态驱动：** WHILE [持续条件] THE [系统名称] SHALL [系统响应]
- **可选特性：** WHERE [功能包含] THE [系统名称] SHALL [系统响应]
- **复杂需求：** WHEN [事件] AND IF [条件] THEN THE [系统名称] SHALL [响应]

#### 技术方案设计

**目标：** 基于需求创建详细技术设计

**执行标准：**
- 每个技术决策引用对应需求编号
- 包含系统架构图、组件设计、数据模型、API设计
- 说明技术选择原因和备选方案
- 详细错误分类、错误码、处理策略
- 覆盖单元、集成、端到端测试策略
- 文档位置：`.specs/{feature_name}/design.md`

**设计文档模板：**

```markdown
# 技术设计文档

## 概述
[技术方案总体描述，设计目标和原则]

## 系统架构
### 技术栈选择
- **前端：** [选择及原因]
- **后端：** [选择及原因]
- **数据库：** [选择及原因]

### 跨平台开发规范
- **命令行工具：** 根据不同OS调整脚本和命令
- **文件路径：** 使用平台无关的路径处理
- **依赖管理：** 优先bun > pnpm > npm
- **性能优化：** 针对不同平台特点优化

### 代码质量要求
- 立即可运行：包含完整依赖、配置、运行说明
- 语法检查：正确括号、分号、缩进等
- 最小化实现：只编写直接解决需求的代码
- 渐进增强：核心功能优先，然后增强特性

## 组件设计
### 核心组件
#### 组件名称
- **职责：** [主要职责]
- **接口：** [对外接口定义]
- **依赖：** [对其他组件依赖]

### 组件交互图
```mermaid
graph TD
    A[组件A] --> B[组件B]
    B --> C[组件C]
```

## 数据模型设计
### 数据实体
```typescript
interface Entity {
  id: string;
  name: string;
  // 其他字段
}
```

## API 设计
### REST API 端点
#### GET /api/resource
- **描述：** [接口描述]
- **参数：** [请求参数]
- **响应：** [响应格式]

## 错误处理策略
### 错误分类
- **用户错误：** [处理方式]
- **系统错误：** [处理方式]
- **网络错误：** [处理方式]

### 错误码定义
- **E001：** [错误描述和处理方式]

## 测试策略
- **单元测试：** [范围和策略]
- **集成测试：** [范围和策略]
- **端到端测试：** [范围和策略]

## 安全考虑
- 身份验证策略
- 授权策略
- 数据保护措施
```

#### 任务拆分与实施

**目标：** 转化为可执行编码任务

**执行标准：**
- 每个任务引用对应设计章节和需求编号
- 任务具体可在2-8小时完成，包含输入、输出、验收标准
- 按测试驱动开发组织：编写测试→实现功能→重构优化
- 使用DAG表示任务依赖，标注并行任务
- 包含工时估算，总工时不超过40小时
- 文档位置：`.specs/{feature_name}/tasks.md`

**任务文档模板：**

```markdown
# 实施计划

## 任务概述
[整个实施计划简要描述，总体策略和里程碑]

## 任务清单

### 阶段一：基础设施搭建
- [ ] 1. 项目结构初始化
  - 创建项目目录结构和核心配置文件
  - 设置开发环境和构建工具
  - **需求引用：** 需求 1.1, 1.2
  - **预计工时：** 2小时
  - **可并行：** 与任务2并行

### 阶段二：数据层实现
- [ ] 2. 数据模型实现
  - [ ] 2.1 用户数据模型
    - 实现User实体类和验证逻辑
    - 编写User模型单元测试
    - **需求引用：** 需求 1.2, 1.3
    - **预计工时：** 2小时

## 任务执行原则
1. 增量开发：每个任务独立运行测试
2. 测试驱动：优先编写测试，然后实现功能
3. 及时集成：完成功能及时集成主分支
4. 文档同步：代码和文档保持同步更新
5. 质量检查：每个任务完成后代码审查
6. 并行执行：识别同时进行的任务，提高效率
7. 安全优先：每个功能开发考虑安全影响

## 执行监控

### 进度跟踪
- 实时状态：每日更新任务状态和障碍
- 质量指标：跟踪代码覆盖率、性能指标、安全检查
- 风险预警：及时识别影响进度的风险

### 问题处理流程
1. 问题识别：明确性质和影响范围
2. 解决方案评估：快速评估多个方案成本效益
3. 决策和执行：选择最优方案并立即执行
4. 后续跟踪：验证解决效果防止问题复发

### 协作规范
- 专业亲和：技术语言保持亲和力
- 决策明确：提供清晰精确技术决策，减少歧义
- 支持态度：理解开发困难，提供建设性建议
- 简洁高效：避免冗长说明，优先可操作信息
- 快速反馈：遇到问题及时沟通，不要默默承受
- 上下文完整：提供充分背景信息帮助理解
- 解决方案导向：提出问题同时建议可能解决方案

## 里程碑检查点
- **M1：** 基础设施完成
- **M2：** 数据层完成
- **M3：** 业务层完成
- **M4：** API层完成
- **M5：** 前端完成
- **M6：** 系统集成完成
```

## 执行规则

### 任务执行
1. 单任务原子性：每次执行一个任务，完成后立即停止等待确认
2. 上下文读取：执行前先读取requirements.md、design.md、tasks.md
3. 质量门禁：代码语法检查、单元测试通过、安全扫描、跨平台验证
4. 问题上报：技术困难、需求歧义、设计缺陷、安全风险时立即停止上报
5. 并行验证：开始前检查依赖关系，有可并行任务组一次性执行
6. 安全评估：检查用户输入、敏感数据、权限控制
7. 平台测试：系统调用、文件操作、网络访问在Windows环境验证

### 质量控制

#### 需求审查检查清单
- [ ] 所有需求采用正确EARS格式
- [ ] 用户故事清晰明确，包含角色、功能、价值
- [ ] 验收标准具体可测试
- [ ] 覆盖所有功能和非功能性需求
- [ ] 约束条件明确定义

#### 设计审查检查清单
- [ ] 架构设计合理，组件职责清晰
- [ ] API设计符合RESTful原则
- [ ] 数据模型设计规范
- [ ] 错误处理策略完整
- [ ] 测试策略覆盖全面
- [ ] 安全和性能考虑充分
- [ ] 跨平台兼容性已考虑
- [ ] 代码质量要求已明确
- [ ] 并行开发可能性已评估

#### 任务审查检查清单
- [ ] 每个任务都是具体编码活动
- [ ] 任务间依赖关系清晰
- [ ] 任务粒度适中（2-8小时）
- [ ] 每个任务引用相关需求
- [ ] 包含充分测试任务
- [ ] 任务顺序符合开发最佳实践

## 常见问题与解决方案

1. **需求不清晰：** 回到需求阶段补充澄清
2. **设计过于复杂：** 分解为更小组件或分阶段实现
3. **任务依赖冲突：** 重新梳理任务顺序和依赖关系
4. **技术难点：** 技术调研并更新设计方案
5. **平台兼容问题：** 分别针对不同平台制定适配方案
6. **性能瓶颈：** 优先解决关键路径性能问题
7. **安全风险：** 立即暂停相关功能开发，重新评估安全方案

## 效率提升技巧

1. **工具并行使用：** 同时运行多个不冲突工具和命令
2. **代码批量操作：** 一次性处理多个相似代码修改
3. **模板复用：** 建立常用代码模板库，提高开发速度
4. **自动化检查：** 使用工具自动检查代码质量和安全问题

3. **模板复用：** 建立常用代码模板库，提高开发速度
4. **自动化检查：** 使用工具自动检查代码质量和安全问题
